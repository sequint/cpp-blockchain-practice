// Block implementation

#include <sstream>
#include "Block.h"
#include "sha256.h"
using namespace std;

string Block::getHash()
{
  return hash;
}

void Block::mineBlock(uint32_t difficulty)
{
  // Initialize char array with length 1 greater than difficulty passed
  char cstr[difficulty + 1];

  // Loop through char array and assign each index value of zero
  for (uint32_t i = 0; i < difficulty; ++i)
  {
    cstr[i] = '0';
  }

  // Assign final index an ending zero value
  cstr[difficulty] = '\0';

  // Convert the char array into a standard string
  string str(cstr);

  // Increment nonce and generate a hash while the first portion of the
  // hash is not equal to the prior string of zeros created
  do
  {
    nonce++;
    hash = generateHash();
  } while (hash.substr(0, difficulty) != str);

  cout << "Block mined: " << hash << endl;
  
}

inline string Block::generateHash() const
{
  // Create a string stream and append block values to it
  stringstream stringStream;

  stringStream << index << time << data << nonce << previousHash;

  // Return value generated by passing stream into sha256 cryptographic hash function
  return sha256(stringStream.str());
}